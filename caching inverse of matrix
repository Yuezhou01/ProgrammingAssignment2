## caching the inverse of the matrix to decrease the computation
## creates a special "matrix" object that can cache its inverse

makeCacheMatrix <- function(x = matrix()) {
  invs<-NULL
  set<-function(y){
    x<<-y
    invs<<-NULL
  }
  get<-function()x
  setsolve<-function(inverse) invs<<-inverse
  getsolve<-function() invs
  list(set=set, get=get, setsolve=setsolve, getsolve=getsolve)

}


## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above

cacheSolve <- function(x, ...) {
  invs<-x$getsolve()
  if(!is.null(invs)){
    message("getting cashed data")
    return(invs)
  }
  data<-x$get()
  invs<-solve(data,...)
  x$setsolve(invs)
  invs
        ## Return a matrix that is the inverse of 'x'
}
